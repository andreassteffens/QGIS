/***************************************************************************
    sbaddressservices.cpp
    ---------------------
    begin                : December 2018
    copyright            : (C) 2018 by Andreas Steffens
    email                : a dot steffens at gds dash team dot de
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

//
// QGIS Specific includes
//

#include "qgisinterface.h"
#include "qgsguiutils.h"
#include "qgsapplication.h"
#include "qgspoint.h"
#include "qgsmapcanvas.h"
#include "qgis.h"
#include "qgscoordinatereferencesystem.h"
#include "qgscoordinatetransform.h"
#include "qgsprojectionselectiondialog.h"
#include "qgsdockwidget.h"

#include "sbaddressservicesplugin.h"
#include "sbaddressservicesgui.h"

//
// Qt Related Includes
//

#include <QAction>
#include <QToolBar>
#include <QLayout>
#include <QLineEdit>
#include <QClipboard>
#include <QPushButton>
#include <QToolButton>
#include <QFile>
#include <QLabel>
#include <QMenu>

//////////////////////////////////////////////////////////////////////
//
// THE FOLLOWING METHODS ARE MANDATORY FOR ALL PLUGINS
//
//////////////////////////////////////////////////////////////////////

sbAddressServicesPlugin::sbAddressServicesPlugin( QgisInterface *qgisInterface )
  : QgisPlugin( sName, sDescription, sCategory, sPluginVersion, sPluginType )
  , mpQgisIface( qgisInterface )
{
  // nothing to be done here for now
}

/*
 * Initialize the GUI interface for the plugin - this is only called once when the plugin is
 * added to the plugin registry in the QGIS application.
 */
void sbAddressServicesPlugin::initGui()
{
  //create the dock widget
  mpDockWidget = new QgsDockWidget( tr(qPrintable(sName)), mpQgisIface->mainWindow() );
  mpDockWidget->setObjectName( QStringLiteral( "sbAddressServices" ) );
  mpDockWidget->setAllowedAreas( Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea );
  mpQgisIface->addDockWidget( Qt::LeftDockWidgetArea, mpDockWidget );

  // Create the action for tool
  mpQActionPointer = new QAction( QIcon(), tr(qPrintable(sName)), this );
  mpQActionPointer->setObjectName( QStringLiteral( "mpQActionPointer" ) );
  mpQActionPointer->setIcon(QIcon(":/sbaddressservices/icons/sb_address_services.png"));
  mpQActionPointer->setCheckable( true );
  mpQActionPointer->setChecked( mpDockWidget->isVisible() );
  mpQActionPointer->setWhatsThis( tr(qPrintable(sDescription)) );
  
  connect( mpQActionPointer, &QAction::triggered, this, &sbAddressServicesPlugin::showOrHide );
  mpQgisIface->addPluginToVectorMenu( QString(), mpQActionPointer );
  mpQgisIface->addVectorToolBarIcon( mpQActionPointer );

  sbAddressServicesGui *pGui = new sbAddressServicesGui(mpQgisIface, sName);
  mpDockWidget->setWidget(pGui);
  
  connect(mpDockWidget.data(), SIGNAL(visibilityChanged), mpQActionPointer, SLOT(setChecked));
  connect(mpDockWidget.data(), &QDockWidget::visibilityChanged, mpQActionPointer, &QAction::setChecked);
}

//method defined in interface
void sbAddressServicesPlugin::help()
{
  // implement me!
}

void sbAddressServicesPlugin::showOrHide()
{
  if ( mpQActionPointer->isChecked() )
    mpDockWidget->show();
  else
    mpDockWidget->hide();
}

// Unload the plugin by cleaning up the GUI
void sbAddressServicesPlugin::unload()
{
  // remove the GUI
  if (mpQgisIface)
  {
    mpQgisIface->vectorMenu()->removeAction(mpQActionPointer);
    mpQgisIface->removeVectorToolBarIcon(mpQActionPointer);

    mpQgisIface = nullptr;
  }
  
  if (mpDockWidget)
    delete mpDockWidget;
  
  if(mpQActionPointer)
    delete mpQActionPointer;
}

//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////

/**
 * Required extern functions needed  for every plugin
 * These functions can be called prior to creating an instance
 * of the plugin class
 */
// Class factory to return a new instance of the plugin class
QGISEXTERN QgisPlugin *classFactory( QgisInterface *qgisInterfacePointer )
{
  return new sbAddressServicesPlugin( qgisInterfacePointer );
}

// Return the name of the plugin - note that we do not user class members as
// the class may not yet be insantiated when this method is called.
QGISEXTERN const QString *name()
{
  return &sName;
}

// Return the description
QGISEXTERN const QString *description()
{
  return &sDescription;
}

// Return the category
QGISEXTERN const QString *category()
{
  return &sCategory;
}

// Return the type (either UI or MapLayer plugin)
QGISEXTERN int type()
{
  return sPluginType;
}

// Return the version number for the plugin
QGISEXTERN const QString *version()
{
  return &sPluginVersion;
}

QGISEXTERN const QString *icon()
{
  return &sPluginIcon;
}

QGISEXTERN const QString *experimental()
{
  return &sExperimental;
}

QGISEXTERN const QString *create_date()
{
  return &sCreateDate;
}

QGISEXTERN const QString *update_date()
{
  return &sUpdateDate;
}

// Delete ourself
QGISEXTERN void unload( QgisPlugin *pluginPointer )
{
  delete pluginPointer;
}
